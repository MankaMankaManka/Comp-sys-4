// File name: Decode.hdl

/**
 * The instruction decoder determines the type of instruction (a or c)
 * and decodes those instructions.
 * The input in[16] is the instruction to be decoded.
 * The outputs are used as follows:
 *   type:      0 if a-instruction, 1 if c-instruction. 
 *   a:         Determines whether the ALU input uses A (0) or Memory[A] (1)
 *   c1 .. c6:  Op-code wires to ALU
 *   d1 d2 d3:  Destination wires to the load pins of A,D registers and Memory
 *   j1 j2 j3:  Jump wires to Jump Unit
 * For a-instructions, d1 should be 1, all other outputs should be 0
 * For c-instructions, outputs should correspond to their bits in the c-instruction
 */

CHIP Decode {

    IN  in[16];             // instruction to decode

    OUT type,               // Instruction type
        a,                  // ALU A/M
        c1,c2,c3,c4,c5,c6,  // Op-code wires to ALU
        d1,d2,d3,           // Destination wires
        j1,j2,j3;           // Jump wires

PARTS:
        PARTS:
    And(a=instruction[15], b=true, out=type);

    Mux8Way16(a=false, b=false, c=false, d=false, e=false, f=false, g=false, h=instruction, sel=type, 
            outA=d1, outB=c1, outC=j1);

    Mux8Way16(a=instruction[0..2], b=instruction[3..9], c=instruction[10..12], 
            d=instruction[13..15], e=false, f=false, g=false, h=false, sel=type, 
            outA=d2, outB=d3, outC=c2, outD=c3, outE=c4, outF=c5, outG=c6, outH=j2, outI=j3);

}
