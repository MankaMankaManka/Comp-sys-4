// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

    CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)

    PARTS:
    Not(in=instruction[15], out=isAInstruction);
    Not(in=isAInstruction, out=isCInstruction);
    And(a=isCInstruction, b=instruction[5], out=useALUOutput); 
    Mux16(a=instruction, b=ALUout, sel=useALUOutput, out=inputToARegister);
    Or(a=isAInstruction, b=useALUOutput, out=loadARegister);
    ARegister(in=inputToARegister, load=loadARegister, out=dataInARegister);
    Mux16(a=dataInARegister, b=inM, sel=instruction[12], out=ALUInput);
    And(a=isCInstruction, b=instruction[4], out=loadDRegister);
    DRegister(in=ALUout, load=loadDRegister, out=dataInDRegister);
    ALU(x=dataInDRegister, y=ALUInput, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=ALUout, zr=zeroFlag, ng=negativeFlag);
    Or16(a=false, b=dataInARegister, out[0..14]=addressM);
    Or16(a=false, b=ALUout, out=outM);
    And(a=isCInstruction, b=instruction[3], out=writeM);
    And(a=zeroFlag, b=instruction[1], out=jumpIfZero);   // Jump if zero
    And(a=negativeFlag, b=instruction[2], out=jumpIfNegative); // Jump if negative
    Or(a=zeroFlag, b=negativeFlag, out=jumpIfZeroOrNegative);
    Not(in=jumpIfZeroOrNegative, out=positiveCondition); // Positive condition (not zero and not negative)
    And(a=positiveCondition, b=instruction[0], out=jumpIfPositive); // Jump if positive
    Or(a=jumpIfZero, b=jumpIfNegative, out=jumpIfLessOrEqual);
    Or(a=jumpIfLessOrEqual, b=jumpIfPositive, out=jumpCondition); // Load PC if condition met and jump if condition
    And(a=isCInstruction, b=jumpCondition, out=loadPC); // Only load PC if C instruction
    Not(in=loadPC, out=incrementPC); // Only increment if not loading
    PC(in=dataInARegister, inc=incrementPC, load=loadPC, reset=reset, out[0..14]=pc);
}
